"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
"""

import csv
import io
from datetime import datetime
from typing import List, Dict, Any
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from loguru import logger

from bot.keyboards import get_history_keyboard, get_pagination_keyboard
from database.operations import get_parsing_results, get_staff_records, log_export


async def history_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
    user = message.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = get_parsing_results(user.id, limit=10)
    
    if not results:
        await message.answer(
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞.\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /parse –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–∞—Ä—Å–∏—Ç—å URL\"",
            reply_markup=get_history_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}\n\n"
    
    for i, result in enumerate(results[:5], 1):
        text += f"<b>{i}. {result['url'][:50]}...</b>\n"
        text += f"–ó–∞–ø–∏—Å–µ–π: {result['results_count']}\n"
        text += f"–î–∞—Ç–∞: {result['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {result['status']}\n\n"
    
    if len(results) > 5:
        text += f"... –∏ –µ—â–µ {len(results) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(
        text,
        reply_markup=get_history_keyboard(),
        parse_mode="HTML"
    )


async def export_csv_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV"""
    user = callback_query.from_user
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ callback_data
        parsing_result_id = int(callback_query.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
        records = get_staff_records(parsing_result_id)
        
        if not records:
            await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
        csv_file = create_csv_file(records)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback_query.message.answer_document(
            document=csv_file,
            caption=f"üìÅ <b>–≠–∫—Å–ø–æ—Ä—Ç CSV</b>\n\n"
                   f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}\n"
                   f"–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode="HTML"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        log_export(user.id, parsing_result_id, 'csv', len(records))
        
        await callback_query.answer("CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞", show_alert=True)


def create_csv_file(records: List[Dict[str, Any]]) -> io.BytesIO:
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞"""
    csv_buffer = io.StringIO()
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
    fieldnames = [
        'fio', 'position', 'email', 'phone', 'department',
        'source_url', 'confidence', 'is_validated', 'is_correct'
    ]
    
    writer = csv.DictWriter(csv_buffer, fieldnames=fieldnames)
    writer.writeheader()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for record in records:
        writer.writerow({
            'fio': record.get('fio', ''),
            'position': record.get('position', ''),
            'email': record.get('email', ''),
            'phone': record.get('phone', ''),
            'department': record.get('department', ''),
            'source_url': record.get('source_url', ''),
            'confidence': record.get('confidence', 0.0),
            'is_validated': record.get('is_validated', False),
            'is_correct': record.get('is_correct', '')
        })
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BytesIO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    csv_bytes = io.BytesIO()
    csv_bytes.write(csv_buffer.getvalue().encode('utf-8-sig'))  # UTF-8 —Å BOM –¥–ª—è Excel
    csv_bytes.seek(0)
    
    return csv_bytes


async def show_recent_results(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    user = callback_query.from_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = get_parsing_results(user.id, limit=5)
    
    if not results:
        await callback_query.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞", show_alert=True)
        return
    
    text = "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n\n"
    
    for i, result in enumerate(results, 1):
        text += f"<b>{i}. –†–µ–∑—É–ª—å—Ç–∞—Ç #{result['id']}</b>\n"
        text += f"URL: {result['url'][:60]}...\n"
        text += f"–ó–∞–ø–∏—Å–µ–π: {result['results_count']}\n"
        text += f"–î–∞—Ç–∞: {result['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_recent_results_keyboard(results),
        parse_mode="HTML"
    )


def get_recent_results_keyboard(results: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    for result in results[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        builder.add(InlineKeyboardButton(
            text=f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç #{result['id']}",
            callback_data=f"show_result_{result['id']}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö",
        callback_data="export_all_csv"
    ))
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_history"
    ))
    
    builder.adjust(1)
    return builder.as_markup()


async def show_result_details(callback_query: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        result_id = int(callback_query.data.split('_')[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
        records = get_staff_records(result_id)
        
        if not records:
            await callback_query.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–∫–∞–∑–∞", show_alert=True)
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ confidence
        high_conf = [r for r in records if r['confidence'] >= 0.7]
        medium_conf = [r for r in records if 0.5 <= r['confidence'] < 0.7]
        low_conf = [r for r in records if r['confidence'] < 0.5]
        
        text = f"üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç #{result_id}</b>\n\n"
        text += f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(records)}\n"
        text += f"‚Ä¢ –í—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {len(high_conf)}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {len(medium_conf)}\n"
        text += f"‚Ä¢ –ù–∏–∑–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {len(low_conf)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
        for i, record in enumerate(records[:5], 1):
            text += f"<b>{i}. {record['fio']}</b>\n"
            text += f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {record['position'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            text += f"Email: {record['email'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {record['confidence']:.2f}\n\n"
        
        if len(records) > 5:
            text += f"... –∏ –µ—â–µ {len(records) - 5} –∑–∞–ø–∏—Å–µ–π\n\n"
        
        await callback_query.message.edit_text(
            text,
            reply_markup=get_result_details_keyboard(result_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π", show_alert=True)


def get_result_details_keyboard(result_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üìÅ –≠–∫—Å–ø–æ—Ä—Ç CSV",
        callback_data=f"export_csv_{result_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é",
        callback_data=f"manual_check_{result_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_recent"
    ))
    
    builder.adjust(1)
    return builder.as_markup()
