"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

from bot.states import ValidationStates
# from database.operations import validate_staff_record, get_staff_records  # –£–¥–∞–ª–µ–Ω–æ


async def validate_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /validate"""
    await message.answer(
        "üîç <b>–†—É—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–§–ò–û|email|–¥–æ–ª–∂–Ω–æ—Å—Ç—å|URL</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á|ivanov@university.ru|–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä|https://example.edu</code>\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.",
        parse_mode="HTML"
    )
    await state.set_state(ValidationStates.waiting_for_manual_input)


async def manual_validation_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        parts = message.text.strip().split('|')
        
        if len(parts) != 4:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "<code>–§–ò–û|email|–¥–æ–ª–∂–Ω–æ—Å—Ç—å|URL</code>\n\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
                "<code>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á|ivanov@university.ru|–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä|https://example.edu</code>",
                parse_mode="HTML"
            )
            return
        
        fio, email, position, url = [part.strip() for part in parts]
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        validation_result = validate_manual_data(fio, email, position, url)
        
        if validation_result['is_valid']:
            await message.answer(
                f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã!</b>\n\n"
                f"<b>–§–ò–û:</b> {fio}\n"
                f"<b>Email:</b> {email}\n"
                f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"
                f"<b>URL:</b> {url}\n"
                f"<b>Confidence:</b> {validation_result['confidence']:.2f}",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                f"‚ùå <b>–î–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é</b>\n\n"
                f"<b>–ü—Ä–æ–±–ª–µ–º—ã:</b>\n" + "\n".join(validation_result['errors']),
                parse_mode="HTML"
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            parse_mode="HTML"
        )
        await state.clear()


def validate_manual_data(fio: str, email: str, position: str, url: str) -> dict:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä—É—á–Ω—É—é –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    errors = []
    confidence = 0.0
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    if not fio or len(fio.split()) < 2:
        errors.append("‚Ä¢ –§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞")
    else:
        confidence += 0.3
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è email
    import re
    email_pattern = r'^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}$'
    if not re.match(email_pattern, email):
        errors.append("‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
    else:
        confidence += 0.4
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    if not position or len(position.strip()) < 3:
        errors.append("‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
    else:
        confidence += 0.2
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not url.startswith(('http://', 'https://')):
        errors.append("‚Ä¢ URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
    else:
        confidence += 0.1
    
    return {
        'is_valid': len(errors) == 0,
        'errors': errors,
        'confidence': min(confidence, 1.0)
    }


async def validate_correct_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ'"""
    await callback_query.answer("–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–±–µ–∑ –ë–î)", show_alert=True)


async def validate_incorrect_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–µ–≤–µ—Ä–Ω–æ'"""
    await callback_query.answer("–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–±–µ–∑ –ë–î)", show_alert=True)


async def manual_check_handler(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é'"""
    await callback_query.answer("–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–±–µ–∑ –ë–î)", show_alert=True)


def get_validation_keyboard(record_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        callback_data=f"validate_correct_{record_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –ù–µ–≤–µ—Ä–Ω–æ",
        callback_data=f"validate_incorrect_{record_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        callback_data=f"skip_validation_{record_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_results"
    ))
    
    builder.adjust(2)
    return builder.as_markup()
